(function(b){function a(b,d){if({}.hasOwnProperty.call(a.cache,b))return a.cache[b];var e=a.resolve(b);if(!e)throw new Error('Failed to resolve module '+b);var c={id:b,require:a,filename:b,exports:{},loaded:!1,parent:d,children:[]};d&&d.children.push(c);var f=b.slice(0,b.lastIndexOf('/')+1);return a.cache[b]=c.exports,e.call(c.exports,c,c.exports,f,b),c.loaded=!0,a.cache[b]=c.exports}a.modules={},a.cache={},a.resolve=function(b){return{}.hasOwnProperty.call(a.modules,b)?a.modules[b]:void 0},a.define=function(b,c){a.modules[b]=c},a.define('dist/index.js',function(b,c,i,j){'use strict';function d(g,h,i){var k,c=!0;a:while(c){var b=g,a=h,f=i;j=undefined,c=!1;switch(f.typeName){case'Enum':case'String':case'Number':case'Boolean':case'SourceSpan':return a;case'Const':g=b;h=a;i=f.argument;c=!0;continue a;case'Maybe':if(!(k=a))return k;g=b;h=a;i=f.argument;c=!0;continue a;case'List':return a.map(function(a){return d(b,a,f.argument)});case'Union':g=b;h=a;i=e['default'][a.type];c=!0;continue a;default:{var j=function(c){return c={},f.fields.forEach(function(e){var f=d(b,a[e.name],e.type);c[e.name]=f==null?null:f}),{v:b['reduce'+a.type](a,c)}}();if(typeof j==='object')return j.v}}}}function h(b,a){return d(b,a,e['default'][a.type])}c['default']=h;var e=a('node_modules/shift-spec/dist/index.js',b),f=a('dist/clone-reducer.js',b);Object.defineProperty(c,'CloneReducer',{enumerable:!0,get:function a(){return f['default']}});var g=a('dist/monoidal-reducer.js',b);Object.defineProperty(c,'MonoidalReducer',{enumerable:!0,get:function a(){return g['default']}})}),a.define('dist/monoidal-reducer.js',function(k,l,n,m){'use strict';function i(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}function j(a){return a}function b(f){var c=!0;a:while(c){var a=f;d=e=undefined,c=!1;switch(a.typeName){case'Enum':case'String':case'Boolean':case'Number':case'SourceSpan':return null;case'Const':f=a.argument;c=!0;continue a;case'Maybe':{var d=function(c){return c=b(a.argument),c==null?{v:null}:{v:function(a){return a==null?this.identity:c.call(this,a)}}}();if(typeof d==='object')return d.v}case'List':{var e=function(c){return c=b(a.argument),c==null?{v:null}:{v:function(b){var a=this;return this.fold(b.map(function(b){return c.call(a,b)}))}}}();if(typeof e==='object')return e.v}default:return j}}}var f=function(){function a(d,c){for(var b=0;b<c.length;b++){var a=c[b];a.enumerable=a.enumerable||!1,a.configurable=!0,'value'in a&&(a.writable=!0),Object.defineProperty(d,a.key,a)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),e=a('node_modules/shift-spec/dist/index.js',k),d={},g=function(c){var f=e['default'][c],a={};f.fields.forEach(function(d){var c=b(d.type);c!=null&&(a[d.name]=c)});var g=Object.keys(a);d['reduce'+c]={value:function b(e,d){var c=this;return this.fold(g.map(function(b){return a[b].call(c,d[b])}))}}};for(var h in e['default'])g(h);var c=function(){function a(b){i(this,a),this.identity=b.empty();var c=b.prototype&&b.prototype.concat||b.concat;this.append=function(a,b){return c.call(a,b)}}return f(a,[{key:'fold',value:function a(d,b){var c=this;return d.reduce(function(a,b){return c.append(a,b)},b==null?this.identity:b)}}]),a}();l['default']=c,Object.defineProperties(c.prototype,d)}),a.define('node_modules/shift-spec/dist/index.js',function(b,a,c,d){a.default=function(b,t,K,j,d,aR,aV,aW,aU,aS,I,c,r,h,m,n,aD,_,F,y,C,a4,av,aw,E,ay,az,aA,aC,D,aE,aF,aG,aH,aI,aJ,aK,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,G,$,a0,a1,a2,a3,ax,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,q,B,z,s,o,v,aB,u,A,x,L,H,p,J,aZ,aO,aL,aP,aM,aQ,aN,w,l,f,aT,k,aY,aX){function a(a){return{typeName:'Maybe',argument:a}}function i(a){return{typeName:'List',argument:a}}function e(a){return{typeName:'Const',argument:a}}function g(){return{typeName:'Union',arguments:[].slice.call(arguments,0)}}return b={},t={typeName:'Boolean'},K={typeName:'Number'},j={typeName:'String'},d={typeName:'Enum',values:['ArrayBinding','ArrayExpression','ArrowExpression','AssignmentExpression','BinaryExpression','BindingIdentifier','BindingProperty','BindingPropertyIdentifier','BindingPropertyProperty','BindingWithDefault','Block','BlockStatement','BreakStatement','CallExpression','CatchClause','Class','ClassDeclaration','ClassElement','ClassExpression','CompoundAssignmentExpression','ComputedMemberExpression','ComputedPropertyName','ConditionalExpression','ContinueStatement','DataProperty','DebuggerStatement','Directive','DoWhileStatement','EmptyStatement','Export','ExportAllFrom','ExportDeclaration','ExportDefault','ExportFrom','ExportSpecifier','Expression','ExpressionStatement','ForInStatement','ForOfStatement','ForStatement','FormalParameters','Function','FunctionBody','FunctionDeclaration','FunctionExpression','Getter','IdentifierExpression','IfStatement','Import','ImportDeclaration','ImportNamespace','ImportSpecifier','IterationStatement','LabeledStatement','LiteralBooleanExpression','LiteralInfinityExpression','LiteralNullExpression','LiteralNumericExpression','LiteralRegExpExpression','LiteralStringExpression','MemberExpression','Method','MethodDefinition','Module','NamedObjectProperty','NewExpression','NewTargetExpression','Node','ObjectBinding','ObjectExpression','ObjectProperty','PropertyName','ReturnStatement','Script','Setter','ShorthandProperty','SourceLocation','SourceSpan','SpreadElement','Statement','StaticMemberExpression','StaticPropertyName','Super','SwitchCase','SwitchDefault','SwitchStatement','SwitchStatementWithDefault','TemplateElement','TemplateExpression','ThisExpression','ThrowStatement','TryCatchStatement','TryFinallyStatement','UnaryExpression','UpdateExpression','VariableDeclaration','VariableDeclarationStatement','VariableDeclarator','WhileStatement','WithStatement','YieldExpression','YieldGeneratorExpression']},aR={typeName:'Enum',values:['var','let','const']},aV={typeName:'Enum',values:['+=','-=','*=','/=','%=','<<=','>>=','>>>=','|=','^=','&=']},aW={typeName:'Enum',values:['==','!=','===','!==','<','<=','>','>=','in','instanceof','<<','>>','>>>','+','-','*','/','%',',','||','&&','|','^','&']},aU={typeName:'Enum',values:['+','-','!','~','typeof','void','delete']},aS={typeName:'Enum',values:['++','--']},I=b.SourceLocation={},c=b.SourceSpan={},r=b.BindingWithDefault={},h=b.BindingIdentifier={},m=b.ArrayBinding={},n=b.ObjectBinding={},aD=b.BindingPropertyIdentifier={},_=b.BindingPropertyProperty={},F=b.ClassExpression={},y=b.ClassDeclaration={},C=b.ClassElement={},a4=b.Module={},av=b.Import={},aw=b.ImportNamespace={},E=b.ImportSpecifier={},ay=b.ExportAllFrom={},az=b.ExportFrom={},aA=b.Export={},aC=b.ExportDefault={},D=b.ExportSpecifier={},aE=b.Method={},aF=b.Getter={},aG=b.Setter={},aH=b.DataProperty={},aI=b.ShorthandProperty={},aJ=b.ComputedPropertyName={},aK=b.StaticPropertyName={},M=b.LiteralBooleanExpression={},N=b.LiteralInfinityExpression={},O=b.LiteralNullExpression={},P=b.LiteralNumericExpression={},Q=b.LiteralRegExpExpression={},R=b.LiteralStringExpression={},S=b.ArrayExpression={},T=b.ArrowExpression={},U=b.AssignmentExpression={},V=b.BinaryExpression={},W=b.CallExpression={},X=b.CompoundAssignmentExpression={},Y=b.ComputedMemberExpression={},Z=b.ConditionalExpression={},G=b.FunctionExpression={},$=b.IdentifierExpression={},a0=b.NewExpression={},a1=b.NewTargetExpression={},a2=b.ObjectExpression={},a3=b.UnaryExpression={},ax=b.StaticMemberExpression={},a5=b.TemplateExpression={},a6=b.ThisExpression={},a7=b.UpdateExpression={},a8=b.YieldExpression={},a9=b.YieldGeneratorExpression={},aa=b.BlockStatement={},ab=b.BreakStatement={},ac=b.ContinueStatement={},ad=b.DebuggerStatement={},ae=b.DoWhileStatement={},af=b.EmptyStatement={},ag=b.ExpressionStatement={},ah=b.ForInStatement={},ai=b.ForOfStatement={},aj=b.ForStatement={},ak=b.IfStatement={},al=b.LabeledStatement={},am=b.ReturnStatement={},an=b.SwitchStatement={},ao=b.SwitchStatementWithDefault={},ap=b.ThrowStatement={},aq=b.TryCatchStatement={},ar=b.TryFinallyStatement={},as=b.VariableDeclarationStatement={},at=b.WhileStatement={},au=b.WithStatement={},q=b.Block={},B=b.CatchClause={},z=b.Directive={},s=b.FormalParameters={},o=b.FunctionBody={},v=b.FunctionDeclaration={},aB=b.Script={},u=b.SpreadElement={},A=b.Super={},x=b.SwitchCase={},L=b.SwitchDefault={},H=b.TemplateElement={},p=b.VariableDeclaration={},J=b.VariableDeclarator={},aZ=g(F,y),aO=g(aD,_),aL=g(ay,az,aA,aC),aP=g(av,aw),aM=g(aE,aF,aG),aQ=g(aM,aH),aN=g(aQ,aI),w=g(aJ,aK),l=g(Y,ax),f=g(l,F,M,N,O,P,Q,R,S,T,U,V,W,X,Z,G,$,a0,a1,a2,a3,a5,a6,a7,a8,a9),aT=g(ae,ah,ai,aj,at),k=g(aT,y,aa,ab,ac,ad,af,ag,ak,al,am,an,ao,ap,aq,ar,as,au,v),aY=g(k,f,w,aN,aP,aL,r,h,m,n,aO,C,a4,E,D,q,B,z,s,o,aB,u,A,x,L,H,p,J),aX=g(G,v),I.typeName='SourceLocation',I.fields=[{name:'line',type:K},{name:'column',type:K},{name:'offset',type:K}],c.typeName='SourceSpan',c.fields=[{name:'source',type:a(j)},{name:'start',type:I},{name:'end',type:I}],r.typeName='BindingWithDefault',r.fields=[{name:'type',type:e(d),value:'BindingWithDefault'},{name:'loc',type:a(c)},{name:'binding',type:g(n,m,h,l)},{name:'init',type:f}],h.typeName='BindingIdentifier',h.fields=[{name:'type',type:e(d),value:'BindingIdentifier'},{name:'loc',type:a(c)},{name:'name',type:j}],m.typeName='ArrayBinding',m.fields=[{name:'type',type:e(d),value:'ArrayBinding'},{name:'loc',type:a(c)},{name:'elements',type:i(a(g(n,m,h,l,r)))},{name:'restElement',type:a(g(n,m,h,l))}],n.typeName='ObjectBinding',n.fields=[{name:'type',type:e(d),value:'ObjectBinding'},{name:'loc',type:a(c)},{name:'properties',type:i(aO)}],aD.typeName='BindingPropertyIdentifier',aD.fields=[{name:'type',type:e(d),value:'BindingPropertyIdentifier'},{name:'loc',type:a(c)},{name:'binding',type:h},{name:'init',type:a(f)}],_.typeName='BindingPropertyProperty',_.fields=[{name:'type',type:e(d),value:'BindingPropertyProperty'},{name:'loc',type:a(c)},{name:'name',type:w},{name:'binding',type:g(n,m,h,l,r)}],F.typeName='ClassExpression',F.fields=[{name:'type',type:e(d),value:'ClassExpression'},{name:'loc',type:a(c)},{name:'name',type:a(h)},{name:'super',type:a(f)},{name:'elements',type:i(C)}],y.typeName='ClassDeclaration',y.fields=[{name:'type',type:e(d),value:'ClassDeclaration'},{name:'loc',type:a(c)},{name:'name',type:h},{name:'super',type:a(f)},{name:'elements',type:i(C)}],C.typeName='ClassElement',C.fields=[{name:'type',type:e(d),value:'ClassElement'},{name:'loc',type:a(c)},{name:'isStatic',type:t},{name:'method',type:aM}],a4.typeName='Module',a4.fields=[{name:'type',type:e(d),value:'Module'},{name:'loc',type:a(c)},{name:'directives',type:i(z)},{name:'items',type:i(g(aP,aL,k))}],av.typeName='Import',av.fields=[{name:'type',type:e(d),value:'Import'},{name:'loc',type:a(c)},{name:'moduleSpecifier',type:j},{name:'defaultBinding',type:a(h)},{name:'namedImports',type:i(E)}],aw.typeName='ImportNamespace',aw.fields=[{name:'type',type:e(d),value:'ImportNamespace'},{name:'loc',type:a(c)},{name:'moduleSpecifier',type:j},{name:'defaultBinding',type:a(h)},{name:'namespaceBinding',type:h}],E.typeName='ImportSpecifier',E.fields=[{name:'type',type:e(d),value:'ImportSpecifier'},{name:'loc',type:a(c)},{name:'name',type:a(j)},{name:'binding',type:h}],ay.typeName='ExportAllFrom',ay.fields=[{name:'type',type:e(d),value:'ExportAllFrom'},{name:'loc',type:a(c)},{name:'moduleSpecifier',type:j}],az.typeName='ExportFrom',az.fields=[{name:'type',type:e(d),value:'ExportFrom'},{name:'loc',type:a(c)},{name:'namedExports',type:i(D)},{name:'moduleSpecifier',type:a(j)}],aA.typeName='Export',aA.fields=[{name:'type',type:e(d),value:'Export'},{name:'loc',type:a(c)},{name:'declaration',type:g(v,y,p)}],aC.typeName='ExportDefault',aC.fields=[{name:'type',type:e(d),value:'ExportDefault'},{name:'loc',type:a(c)},{name:'body',type:g(v,y,f)}],D.typeName='ExportSpecifier',D.fields=[{name:'type',type:e(d),value:'ExportSpecifier'},{name:'loc',type:a(c)},{name:'name',type:a(j)},{name:'exportedName',type:j}],aE.typeName='Method',aE.fields=[{name:'type',type:e(d),value:'Method'},{name:'loc',type:a(c)},{name:'name',type:w},{name:'isGenerator',type:t},{name:'params',type:s},{name:'body',type:o}],aF.typeName='Getter',aF.fields=[{name:'type',type:e(d),value:'Getter'},{name:'loc',type:a(c)},{name:'name',type:w},{name:'body',type:o}],aG.typeName='Setter',aG.fields=[{name:'type',type:e(d),value:'Setter'},{name:'loc',type:a(c)},{name:'name',type:w},{name:'param',type:g(n,m,h,l,r)},{name:'body',type:o}],aH.typeName='DataProperty',aH.fields=[{name:'type',type:e(d),value:'DataProperty'},{name:'loc',type:a(c)},{name:'name',type:w},{name:'expression',type:f}],aI.typeName='ShorthandProperty',aI.fields=[{name:'type',type:e(d),value:'ShorthandProperty'},{name:'loc',type:a(c)},{name:'name',type:j}],aJ.typeName='ComputedPropertyName',aJ.fields=[{name:'type',type:e(d),value:'ComputedPropertyName'},{name:'loc',type:a(c)},{name:'expression',type:f}],aK.typeName='StaticPropertyName',aK.fields=[{name:'type',type:e(d),value:'StaticPropertyName'},{name:'loc',type:a(c)},{name:'value',type:j}],M.typeName='LiteralBooleanExpression',M.fields=[{name:'type',type:e(d),value:'LiteralBooleanExpression'},{name:'loc',type:a(c)},{name:'value',type:t}],N.typeName='LiteralInfinityExpression',N.fields=[{name:'type',type:e(d),value:'LiteralInfinityExpression'},{name:'loc',type:a(c)}],O.typeName='LiteralNullExpression',O.fields=[{name:'type',type:e(d),value:'LiteralNullExpression'},{name:'loc',type:a(c)}],P.typeName='LiteralNumericExpression',P.fields=[{name:'type',type:e(d),value:'LiteralNumericExpression'},{name:'loc',type:a(c)},{name:'value',type:K}],Q.typeName='LiteralRegExpExpression',Q.fields=[{name:'type',type:e(d),value:'LiteralRegExpExpression'},{name:'loc',type:a(c)},{name:'pattern',type:j},{name:'flags',type:j}],R.typeName='LiteralStringExpression',R.fields=[{name:'type',type:e(d),value:'LiteralStringExpression'},{name:'loc',type:a(c)},{name:'value',type:j}],S.typeName='ArrayExpression',S.fields=[{name:'type',type:e(d),value:'ArrayExpression'},{name:'loc',type:a(c)},{name:'elements',type:i(a(g(u,f)))}],T.typeName='ArrowExpression',T.fields=[{name:'type',type:e(d),value:'ArrowExpression'},{name:'loc',type:a(c)},{name:'params',type:s},{name:'body',type:g(o,f)}],U.typeName='AssignmentExpression',U.fields=[{name:'type',type:e(d),value:'AssignmentExpression'},{name:'loc',type:a(c)},{name:'binding',type:g(n,m,h,l)},{name:'expression',type:f}],V.typeName='BinaryExpression',V.fields=[{name:'type',type:e(d),value:'BinaryExpression'},{name:'loc',type:a(c)},{name:'operator',type:aW},{name:'left',type:f},{name:'right',type:f}],W.typeName='CallExpression',W.fields=[{name:'type',type:e(d),value:'CallExpression'},{name:'loc',type:a(c)},{name:'callee',type:g(f,A)},{name:'arguments',type:i(g(u,f))}],X.typeName='CompoundAssignmentExpression',X.fields=[{name:'type',type:e(d),value:'CompoundAssignmentExpression'},{name:'loc',type:a(c)},{name:'operator',type:aV},{name:'binding',type:g(h,l)},{name:'expression',type:f}],Y.typeName='ComputedMemberExpression',Y.fields=[{name:'type',type:e(d),value:'ComputedMemberExpression'},{name:'loc',type:a(c)},{name:'object',type:g(f,A)},{name:'expression',type:f}],Z.typeName='ConditionalExpression',Z.fields=[{name:'type',type:e(d),value:'ConditionalExpression'},{name:'loc',type:a(c)},{name:'test',type:f},{name:'consequent',type:f},{name:'alternate',type:f}],G.typeName='FunctionExpression',G.fields=[{name:'type',type:e(d),value:'FunctionExpression'},{name:'loc',type:a(c)},{name:'isGenerator',type:t},{name:'name',type:a(h)},{name:'params',type:s},{name:'body',type:o}],$.typeName='IdentifierExpression',$.fields=[{name:'type',type:e(d),value:'IdentifierExpression'},{name:'loc',type:a(c)},{name:'name',type:j}],a0.typeName='NewExpression',a0.fields=[{name:'type',type:e(d),value:'NewExpression'},{name:'loc',type:a(c)},{name:'callee',type:f},{name:'arguments',type:i(g(u,f))}],a1.typeName='NewTargetExpression',a1.fields=[{name:'type',type:e(d),value:'NewTargetExpression'},{name:'loc',type:a(c)}],a2.typeName='ObjectExpression',a2.fields=[{name:'type',type:e(d),value:'ObjectExpression'},{name:'loc',type:a(c)},{name:'properties',type:i(aN)}],a3.typeName='UnaryExpression',a3.fields=[{name:'type',type:e(d),value:'UnaryExpression'},{name:'loc',type:a(c)},{name:'operator',type:aU},{name:'operand',type:f}],ax.typeName='StaticMemberExpression',ax.fields=[{name:'type',type:e(d),value:'StaticMemberExpression'},{name:'loc',type:a(c)},{name:'object',type:g(f,A)},{name:'property',type:j}],a5.typeName='TemplateExpression',a5.fields=[{name:'type',type:e(d),value:'TemplateExpression'},{name:'loc',type:a(c)},{name:'tag',type:a(f)},{name:'elements',type:i(g(f,H))}],a6.typeName='ThisExpression',a6.fields=[{name:'type',type:e(d),value:'ThisExpression'},{name:'loc',type:a(c)}],a7.typeName='UpdateExpression',a7.fields=[{name:'type',type:e(d),value:'UpdateExpression'},{name:'loc',type:a(c)},{name:'isPrefix',type:t},{name:'operator',type:aS},{name:'operand',type:g(h,l)}],a8.typeName='YieldExpression',a8.fields=[{name:'type',type:e(d),value:'YieldExpression'},{name:'loc',type:a(c)},{name:'expression',type:a(f)}],a9.typeName='YieldGeneratorExpression',a9.fields=[{name:'type',type:e(d),value:'YieldGeneratorExpression'},{name:'loc',type:a(c)},{name:'expression',type:f}],aa.typeName='BlockStatement',aa.fields=[{name:'type',type:e(d),value:'BlockStatement'},{name:'loc',type:a(c)},{name:'block',type:q}],ab.typeName='BreakStatement',ab.fields=[{name:'type',type:e(d),value:'BreakStatement'},{name:'loc',type:a(c)},{name:'label',type:a(j)}],ac.typeName='ContinueStatement',ac.fields=[{name:'type',type:e(d),value:'ContinueStatement'},{name:'loc',type:a(c)},{name:'label',type:a(j)}],ad.typeName='DebuggerStatement',ad.fields=[{name:'type',type:e(d),value:'DebuggerStatement'},{name:'loc',type:a(c)}],ae.typeName='DoWhileStatement',ae.fields=[{name:'type',type:e(d),value:'DoWhileStatement'},{name:'loc',type:a(c)},{name:'body',type:k},{name:'test',type:f}],af.typeName='EmptyStatement',af.fields=[{name:'type',type:e(d),value:'EmptyStatement'},{name:'loc',type:a(c)}],ag.typeName='ExpressionStatement',ag.fields=[{name:'type',type:e(d),value:'ExpressionStatement'},{name:'loc',type:a(c)},{name:'expression',type:f}],ah.typeName='ForInStatement',ah.fields=[{name:'type',type:e(d),value:'ForInStatement'},{name:'loc',type:a(c)},{name:'left',type:g(p,n,m,h,l)},{name:'right',type:f},{name:'body',type:k}],ai.typeName='ForOfStatement',ai.fields=[{name:'type',type:e(d),value:'ForOfStatement'},{name:'loc',type:a(c)},{name:'left',type:g(p,n,m,h,l)},{name:'right',type:f},{name:'body',type:k}],aj.typeName='ForStatement',aj.fields=[{name:'type',type:e(d),value:'ForStatement'},{name:'loc',type:a(c)},{name:'init',type:a(g(p,f))},{name:'test',type:a(f)},{name:'update',type:a(f)},{name:'body',type:k}],ak.typeName='IfStatement',ak.fields=[{name:'type',type:e(d),value:'IfStatement'},{name:'loc',type:a(c)},{name:'test',type:f},{name:'consequent',type:k},{name:'alternate',type:a(k)}],al.typeName='LabeledStatement',al.fields=[{name:'type',type:e(d),value:'LabeledStatement'},{name:'loc',type:a(c)},{name:'label',type:j},{name:'body',type:k}],am.typeName='ReturnStatement',am.fields=[{name:'type',type:e(d),value:'ReturnStatement'},{name:'loc',type:a(c)},{name:'expression',type:a(f)}],an.typeName='SwitchStatement',an.fields=[{name:'type',type:e(d),value:'SwitchStatement'},{name:'loc',type:a(c)},{name:'discriminant',type:f},{name:'cases',type:i(x)}],ao.typeName='SwitchStatementWithDefault',ao.fields=[{name:'type',type:e(d),value:'SwitchStatementWithDefault'},{name:'loc',type:a(c)},{name:'discriminant',type:f},{name:'preDefaultCases',type:i(x)},{name:'defaultCase',type:L},{name:'postDefaultCases',type:i(x)}],ap.typeName='ThrowStatement',ap.fields=[{name:'type',type:e(d),value:'ThrowStatement'},{name:'loc',type:a(c)},{name:'expression',type:f}],aq.typeName='TryCatchStatement',aq.fields=[{name:'type',type:e(d),value:'TryCatchStatement'},{name:'loc',type:a(c)},{name:'body',type:q},{name:'catchClause',type:B}],ar.typeName='TryFinallyStatement',ar.fields=[{name:'type',type:e(d),value:'TryFinallyStatement'},{name:'loc',type:a(c)},{name:'body',type:q},{name:'catchClause',type:a(B)},{name:'finalizer',type:q}],as.typeName='VariableDeclarationStatement',as.fields=[{name:'type',type:e(d),value:'VariableDeclarationStatement'},{name:'loc',type:a(c)},{name:'declaration',type:p}],at.typeName='WhileStatement',at.fields=[{name:'type',type:e(d),value:'WhileStatement'},{name:'loc',type:a(c)},{name:'test',type:f},{name:'body',type:k}],au.typeName='WithStatement',au.fields=[{name:'type',type:e(d),value:'WithStatement'},{name:'loc',type:a(c)},{name:'object',type:f},{name:'body',type:k}],q.typeName='Block',q.fields=[{name:'type',type:e(d),value:'Block'},{name:'loc',type:a(c)},{name:'statements',type:i(k)}],B.typeName='CatchClause',B.fields=[{name:'type',type:e(d),value:'CatchClause'},{name:'loc',type:a(c)},{name:'binding',type:g(n,m,h,l)},{name:'body',type:q}],z.typeName='Directive',z.fields=[{name:'type',type:e(d),value:'Directive'},{name:'loc',type:a(c)},{name:'rawValue',type:j}],s.typeName='FormalParameters',s.fields=[{name:'type',type:e(d),value:'FormalParameters'},{name:'loc',type:a(c)},{name:'items',type:i(g(n,m,h,l,r))},{name:'rest',type:a(h)}],o.typeName='FunctionBody',o.fields=[{name:'type',type:e(d),value:'FunctionBody'},{name:'loc',type:a(c)},{name:'directives',type:i(z)},{name:'statements',type:i(k)}],v.typeName='FunctionDeclaration',v.fields=[{name:'type',type:e(d),value:'FunctionDeclaration'},{name:'loc',type:a(c)},{name:'isGenerator',type:t},{name:'name',type:h},{name:'params',type:s},{name:'body',type:o}],aB.typeName='Script',aB.fields=[{name:'type',type:e(d),value:'Script'},{name:'loc',type:a(c)},{name:'directives',type:i(z)},{name:'statements',type:i(k)}],u.typeName='SpreadElement',u.fields=[{name:'type',type:e(d),value:'SpreadElement'},{name:'loc',type:a(c)},{name:'expression',type:f}],A.typeName='Super',A.fields=[{name:'type',type:e(d),value:'Super'},{name:'loc',type:a(c)}],x.typeName='SwitchCase',x.fields=[{name:'type',type:e(d),value:'SwitchCase'},{name:'loc',type:a(c)},{name:'test',type:f},{name:'consequent',type:i(k)}],L.typeName='SwitchDefault',L.fields=[{name:'type',type:e(d),value:'SwitchDefault'},{name:'loc',type:a(c)},{name:'consequent',type:i(k)}],H.typeName='TemplateElement',H.fields=[{name:'type',type:e(d),value:'TemplateElement'},{name:'loc',type:a(c)},{name:'rawValue',type:j}],p.typeName='VariableDeclaration',p.fields=[{name:'type',type:e(d),value:'VariableDeclaration'},{name:'loc',type:a(c)},{name:'kind',type:aR},{name:'declarators',type:i(J)}],J.typeName='VariableDeclarator',J.fields=[{name:'type',type:e(d),value:'VariableDeclarator'},{name:'loc',type:a(c)},{name:'binding',type:g(n,m,h,l)},{name:'init',type:a(f)}],b}()}),a.define('dist/clone-reducer.js',function(e,f,i,j){'use strict';function g(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}var b=a('node_modules/shift-spec/dist/index.js',e),c=function a(){g(this,a)};f['default']=c;for(var d in b['default']){var h=b['default'][d];Object.defineProperty(c.prototype,'reduce'+d,{value:function a(c,b){return b}})}}),b.reducer=a('dist/index.js')}.call(this,this))
